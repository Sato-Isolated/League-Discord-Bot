#nullable enable
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace League_Discord_Bot.Json;

internal class JsonMmr
{
    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using QuickType;
    //
    //    var welcome = Welcome.FromJson(jsonString);

    public partial class Mode
    {
        [JsonProperty("ranked")] public Ranked? Ranked { get; set; }

        [JsonProperty("normal")] public Aram? Normal { get; set; }

        [JsonProperty("ARAM")] public Aram? Aram { get; set; }
    }

    public class Aram
    {
        [JsonProperty("avg")] public long? Avg { get; set; }

        [JsonProperty("err")] public long? Err { get; set; }

        [JsonProperty("warn")] public bool? Warn { get; set; }

        [JsonProperty("closestRank")] public string? ClosestRank { get; set; }

        [JsonProperty("percentile")] public double? Percentile { get; set; }

        [JsonProperty("timestamp")] public long? Timestamp { get; set; }

        [JsonProperty("historical")] public object[]? Historical { get; set; }
    }

    public class Ranked
    {
        [JsonProperty("avg")] public long? Avg { get; set; }

        [JsonProperty("err")] public long? Err { get; set; }

        [JsonProperty("warn")] public bool? Warn { get; set; }

        [JsonProperty("summary")] public string? Summary { get; set; }

        [JsonProperty("closestRank")] public string? ClosestRank { get; set; }

        [JsonProperty("percentile")] public long? Percentile { get; set; }

        [JsonProperty("tierData")] public TierDatum[] TierData { get; set; }

        [JsonProperty("timestamp")] public long? Timestamp { get; set; }

        [JsonProperty("historical")] public Historical[] Historical { get; set; }

        [JsonProperty("historicalTierData")] public HistoricalTierDatum[] HistoricalTierData { get; set; }
    }

    public class Historical
    {
        [JsonProperty("avg")] public long? Avg { get; set; }

        [JsonProperty("err")] public long? Err { get; set; }

        [JsonProperty("warn")] public bool? Warn { get; set; }

        [JsonProperty("timestamp")] public long? Timestamp { get; set; }
    }

    public class HistoricalTierDatum
    {
        [JsonProperty("name")] public string? Name { get; set; }

        [JsonProperty("avg")] public long? Avg { get; set; }
    }

    public class TierDatum
    {
        [JsonProperty("name")] public string? Name { get; set; }

        [JsonProperty("avg")] public long? Avg { get; set; }

        [JsonProperty("min")] public long? Min { get; set; }

        [JsonProperty("max")] public long? Max { get; set; }
    }

    public partial class Mode
    {
        public static Mode FromJson(string json)
        {
            return JsonConvert.DeserializeObject<Mode>(json, Converter.Settings);
        }
    }

    private static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new()
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = { new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal } }
        };
    }
}